---
  - name: Generate 1st Worker0 Certificates
    local_action: shell chdir=roles/worker-nodes/files cfssl gencert -ca=ca.pem -ca-key=ca-key.pem -config=ca-config.json -hostname={{ ansible_hostname }},{{loadbalancer_public_ip}},{{ ansible_host }} -profile=kubernetes worker0-csr.json | cfssljson -bare {{ ansible_hostname }}
    when: ansible_hostname == "worker0"

  - name: Generate 2nd Worker1 Certificates
    local_action: shell chdir=roles/worker-nodes/files cfssl gencert -ca=ca.pem -ca-key=ca-key.pem -config=ca-config.json -hostname={{ ansible_hostname }},{{loadbalancer_public_ip}},{{ ansible_host }} -profile=kubernetes worker1-csr.json | cfssljson -bare {{ ansible_hostname }} 
    when: ansible_hostname == "worker1"

  - name: Generate 3rd Worker2 Certificates
    local_action: shell chdir=roles/worker-nodes/files cfssl gencert -ca=ca.pem -ca-key=ca-key.pem -config=ca-config.json -hostname={{ ansible_hostname }},{{loadbalancer_public_ip}},{{ ansible_host }} -profile=kubernetes worker2-csr.json | cfssljson -bare {{ ansible_hostname }} 
    when: ansible_hostname == "worker2"

  - name: Copy the generated keys & certs to worker0 worker-nodes
    copy:
      src: "{{ item }}"
      dest: ~/
    with_items: 
      - ca.pem
      - worker0.pem
      - worker0-key.pem
    when: ansible_hostname == "worker0"

  - name: Copy the generated keys & certs to worker1 worker-nodes
    copy:
      src: "{{ item }}"
      dest: ~/
    with_items: 
      - ca.pem
      - worker1.pem
      - worker1-key.pem
    when: ansible_hostname == "worker1"

  - name: Copy the generated keys & certs to worker2 worker-nodes
    copy:
      src: "{{ item }}"
      dest: ~/
    with_items: 
      - ca.pem
      - worker2.pem
      - worker2-key.pem
    when: ansible_hostname == "worker2"

  - name: Create K8S configuration file for Worker0 - Step I
    local_action: shell chdir=roles/worker-nodes/files kubectl config set-cluster {{ k8s_cluster_name }} --certificate-authority=ca.pem --embed-certs=true --server=https://{{ loadbalancer_public_ip }}:6443 --kubeconfig={{ ansible_hostname }}.kubeconfig
    when: ansible_hostname == "worker0"

  - name: Create K8S configuration file for Worker0 - Step II
    local_action: shell chdir=roles/worker-nodes/files kubectl config set-credentials system:node:{{ ansible_hostname }} --client-certificate={{ ansible_hostname }}.pem --client-key={{ ansible_hostname }}-key.pem --embed-certs=true --kubeconfig={{ ansible_hostname }}.kubeconfig
    when: ansible_hostname == "worker0"

  - name: Create K8S configuration file for Worker0 - Step III
    local_action: shell chdir=roles/worker-nodes/files kubectl config set-context default --cluster={{ k8s_cluster_name }} --user=system:node:{{ ansible_hostname }} --kubeconfig={{ ansible_hostname }}.kubeconfig
    when: ansible_hostname == "worker0"

  - name: Create K8S configuration file for Worker0 - Step IV
    local_action: shell chdir=roles/worker-nodes/files kubectl config use-context default --kubeconfig={{ ansible_hostname }}.kubeconfig
    when: ansible_hostname == "worker0"

####

  - name: Create K8S configuration file for Worker1 - Step I
    local_action: shell chdir=roles/worker-nodes/files kubectl config set-cluster {{ k8s_cluster_name }} --certificate-authority=ca.pem --embed-certs=true --server=https://{{ loadbalancer_public_ip }}:6443 --kubeconfig={{ ansible_hostname }}.kubeconfig
    when: ansible_hostname == "worker1"

  - name: Create K8S configuration file for Worker1 - Step II
    local_action: shell chdir=roles/worker-nodes/files kubectl config set-credentials system:node:{{ ansible_hostname }} --client-certificate={{ ansible_hostname }}.pem --client-key={{ ansible_hostname }}-key.pem --embed-certs=true --kubeconfig={{ ansible_hostname }}.kubeconfig
    when: ansible_hostname == "worker1"

  - name: Create K8S configuration file for Worker1 - Step III
    local_action: shell chdir=roles/worker-nodes/files kubectl config set-context default --cluster={{ k8s_cluster_name }} --user=system:node:{{ ansible_hostname }} --kubeconfig={{ ansible_hostname }}.kubeconfig
    when: ansible_hostname == "worker1"

  - name: Create K8S configuration file for Worker1 - Step IV
    local_action: shell chdir=roles/worker-nodes/files kubectl config use-context default --kubeconfig={{ ansible_hostname }}.kubeconfig
    when: ansible_hostname == "worker1"

####
  - name: Create K8S configuration file for Worker2 - Step I
    local_action: shell chdir=roles/worker-nodes/files kubectl config set-cluster {{ k8s_cluster_name }} --certificate-authority=ca.pem --embed-certs=true --server=https://{{ loadbalancer_public_ip }}:6443 --kubeconfig={{ ansible_hostname }}.kubeconfig
    when: ansible_hostname == "worker2"

  - name: Create K8S configuration file for Worker2 - Step II
    local_action: shell chdir=roles/worker-nodes/files kubectl config set-credentials system:node:{{ ansible_hostname }} --client-certificate={{ ansible_hostname }}.pem --client-key={{ ansible_hostname }}-key.pem --embed-certs=true --kubeconfig={{ ansible_hostname }}.kubeconfig
    when: ansible_hostname == "worker2"

  - name: Create K8S configuration file for Worker2 - Step III
    local_action: shell chdir=roles/worker-nodes/files kubectl config set-context default --cluster={{ k8s_cluster_name }} --user=system:node:{{ ansible_hostname }} --kubeconfig={{ ansible_hostname }}.kubeconfig
    when: ansible_hostname == "worker2"

  - name: Create K8S configuration file for Worker2 - Step IV
    local_action: shell chdir=roles/worker-nodes/files kubectl config use-context default --kubeconfig={{ ansible_hostname }}.kubeconfig
    when: ansible_hostname == "worker2"


  - name: Generate kube-proxy client certificate signing request
    local_action: shell chdir=roles/worker-nodes/files cfssl gencert -ca=ca.pem -ca-key=ca-key.pem -config=ca-config.json -profile=kubernetes kube-proxy-csr.json | cfssljson -bare kube-proxy
    run_once: true    


  - name: Create K8S Proxy Configuration file - Step I
    local_action: shell chdir=roles/worker-nodes/files kubectl config set-cluster {{ k8s_cluster_name }} --certificate-authority=ca.pem --embed-certs=true --server=https://{{ loadbalancer_public_ip }}:6443 --kubeconfig=kube-proxy.kubeconfig
    run_once: true


  - name: Create K8S Proxy Configuration file - Step II
    local_action: shell chdir=roles/worker-nodes/files kubectl config set-credentials kube-proxy --client-certificate=kube-proxy.pem --client-key=kube-proxy-key.pem --embed-certs=true --kubeconfig=kube-proxy.kubeconfig
    run_once: true

  - name: Create K8S Proxy Configuration file - Step III
    local_action: shell chdir=roles/worker-nodes/files kubectl config set-context default --cluster={{ k8s_cluster_name }} --user=kube-proxy --kubeconfig=kube-proxy.kubeconfig
    run_once: true

  - name: Create K8S Proxy Configuration file - Step IV
    local_action: shell chdir=roles/worker-nodes/files kubectl config use-context default --kubeconfig=kube-proxy.kubeconfig
    run_once: true 
  
  - name: Copy kube-config worker and proxy file on Worker0
    copy: 
      src: "{{ item }}"
      dest: ~/ 
    with_items:
      - worker0.kubeconfig
      - kube-proxy.kubeconfig
    when: ansible_hostname == "worker0"

  - name: Copy kube-config worker and proxy file on Worker1
    copy: 
      src: "{{ item }}"
      dest: ~/ 
    with_items:
      - worker1.kubeconfig
      - kube-proxy.kubeconfig
    when: ansible_hostname == "worker0"

  - name: Copy kube-config worker and proxy file on Worker2
    copy: 
      src: "{{ item }}"
      dest: ~/ 
    with_items:
      - worker2.kubeconfig
      - kube-proxy.kubeconfig
    when: ansible_hostname == "worker0"
